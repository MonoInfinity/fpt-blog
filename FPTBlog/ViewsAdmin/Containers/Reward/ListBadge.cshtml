@using FPTBlog.Src.RewardModule
@using FPTBlog.Src.RewardModule.Entity
@{
    var rewards = (List<Reward>)this.ViewData["rewards"];
    var total = (int)this.ViewData["total"];

    var rewardTypes = (SelectList)this.ViewData["rewardTypes"];
}


<div class="px-4 py-2 space-y-4 border-b border-gray-200 rounded-lg shadow ">
    <h1 class="text-2xl font-semibold ">Reward Management</h1>
    <div class="flex items-end justify-between">

        <form class="flex items-end space-x-4 " id="listRewardForm">

            @await Html.PartialAsync("../../Components/Form/TextField.cshtml",
            new { Name = "searchName", Label = "Search", Type = "text", Value = (string)
            this.Context.Request.Query["searchName"] ?? "" , PlaceHolder= "Name", IsLabel = false
            })

            @await Html.PartialAsync("../../Components/Form/FormHidden.cshtml",
            new { Name = "pageSize", Value = (string) this.Context.Request.Query["pageSize"] ?? "12" })
            @await Html.PartialAsync("../../Components/Form/FormHidden.cshtml",
            new { Name = "pageIndex",Value = (string) this.Context.Request.Query["pageIndex"] ?? "0" })

            <div class="my-1">
                @await Html.PartialAsync("../../Components/Form/FormBtn.cshtml",
                new { Label = "Search", Icon = "../../Components/Icons/Search.cshtml" })
            </div>

        </form>
        <div class="my-1">
            @await Html.PartialAsync("../../Components/Form/BtnFuncIcon.cshtml",
            new { Label = "Create New Reward", Icon = "../../Components/Icons/Plus.cshtml", Id="modal-btn" })
        </div>
    </div>
</div>
<div class="mt-2 overflow-hidden border-b border-gray-200 rounded-lg shadow intro-y">
    <table class="min-w-full overflow-auto divide-y divide-gray-200 ">
        <thead class="bg-tango-100">
            <tr>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    #
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Name
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Image
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase ">
                    Description
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Constraint Type
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Constraint
                </th>
                <th scope="col" class="px-6 py-3 text-xs font-medium tracking-wider text-left text-gray-500 uppercase">
                    Create Date
                </th>

                <th scope="col" class="relative px-6 py-3">
                    <span class="sr-only">Edit</span>
                </th>
                <th scope="col" class="relative px-6 py-3">
                    <span class="sr-only">Delete</span>
                </th>
            </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200 fade-in">

            @for (int i = 0; i < rewards.Count; i++)
            {
                var item = rewards[i];

                var linkUpdate = $"{RoutersAdmin.RewardPutUpdate.Link}?rewardId={item.RewardId}";
                <tr class="duration-200 hover:bg-indigo-100">
                    <td class="px-6 py-4 text-sm font-medium text-gray-900 whitespace-nowrap ">
                        @(i+1)
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500 whitespace-nowrap">
                        @item.Name
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500 whitespace-nowrap">
                        <div class="w-6 h-6">
                            <img src="@item.ImageUrl" alt="@item.Name" class="object-cover w-full h-full" />
                        </div>
                    </td>
                    <td class="w-full max-w-sm px-6 py-4 text-sm text-gray-500 break-words ">
                        @item.Description
                    </td>
                    <td class="w-full px-6 py-4 text-sm text-gray-500 whitespace-nowrap">
                        @RewardService.ConvertTypeConstranint(item.Type)
                    </td>
                    <td class="w-full px-6 py-4 text-sm text-gray-500 whitespace-nowrap">
                        @item.Constraint
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500 whitespace-nowrap">
                        @item.CreateDate
                    </td>
                    <td class="px-6 py-4 text-sm font-medium text-right whitespace-nowrap">
                        <a href="@linkUpdate" class="text-indigo-600 hover:text-indigo-900">Edit</a>
                    </td>
                    <td class="px-6 py-4">
                        <button data-rewardId="@item.RewardId"
                        class="text-sm font-medium text-right text-red-600 hover:text-red-900 whitespace-nowrap delete-btn">
                            Delete
                        </button>
                    </td>
                </tr>
            }


        </tbody>
    </table>
    <!-- This example requires Tailwind CSS v2.0+ -->




    @await Html.PartialAsync("../../Components/Pagination/Pagination.cshtml",
    new { PageIndex = (string) this.Context.Request.Query["pageIndex"] ?? "0", PageSize = (string)
    this.Context.Request.Query["pageSize"]?? "12", Total = total })
</div>

<div class="fixed inset-0 invisible overflow-hidden" aria-labelledby="slide-over-title" role="dialog" aria-modal="true"
    id="modal-wrapper">
    <div class="absolute inset-0 overflow-hidden">

        <div class="absolute inset-0 transition-opacity bg-gray-500 bg-opacity-75" aria-hidden="true" id="modal-bg">
        </div>

        <div class="fixed inset-y-0 right-0 flex max-w-full pl-10">

            <div class="w-screen max-w-md transition duration-500 ease-in-out transform translate-x-full sm:duration-700"
                id="modal-panel">
                <div class="flex flex-col h-full py-6 overflow-y-scroll bg-white shadow-xl">
                    <div class="px-4 sm:px-6">
                        <div class="flex items-start justify-between">
                            <h2 class="text-lg font-medium text-gray-900" id="slide-over-title">
                                Add New Reward Badge
                            </h2>
                            <div class="flex items-center ml-3 h-7">
                                <button type="button" id="modal-btn-close"
                                    class="text-gray-400 bg-white rounded-md hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <span class="sr-only">Close panel</span>
                                    <!-- Heroicon name: outline/x -->
                                    <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="relative flex-1 px-4 mt-6 sm:px-6">
                        <!-- Replace with your content -->
                        <div class="absolute inset-0 px-4 sm:px-6">
                            <div class="h-full border-gray-200" aria-hidden="true">
                                @await Html.PartialAsync("../../Components/Form/FormMsg.cshtml")
                                <form class="space-y-4" id="createRewardForm">
                                    @await Html.PartialAsync("../../Components/Form/TextField.cshtml",
                                    new { Name = "name", Label = "Name", Type = "text", Value = "" })
                                    @await Html.PartialAsync("../../Components/Form/FormDropList.cshtml",
                                    new { Name = "type", Label = "Constraint Type", Type = "text", Value = ""
                                    , IsLabel = false, List = rewardTypes })
                                    @await Html.PartialAsync("../../Components/Form/TextField.cshtml",
                                    new { Name = "constraint", Label = "Constraint", Type = "number", Value = "0" })
                                    @await Html.PartialAsync("../../Components/Form/TextareaField.cshtml",
                                    new { Name = "description", Label = "Description", Value = "" })

                                    @await Html.PartialAsync("../../Components/Form/UploadFile.cshtml",
                                    new { Name = "file", Label = "Image" })
                                    <div class="w-6 h-6">
                                        <img src="/images/default-image.png" alt="image"
                                            class="object-cover w-full h-full" id="preview-image" />
                                    </div>

                                    @await Html.PartialAsync("../../Components/Form/FormBtn.cshtml",
                                    new { Label = "Create New",Icon = "../../Components/Icons/AddCategory.cshtml" })
                                </form>
                            </div>
                        </div>
                        <!-- /End replace -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {

<script src="/js/reward-list.js"></script>
}
